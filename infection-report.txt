Escaped mutants:
================

1) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Collection\RatingsCountCollection.php:75    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach ($elements as $element) {
             if (!is_int($element)) {
-                throw new InvalidTypeException("Collection element must be of the type int, " . gettype($element) . " given.");
+                throw new InvalidTypeException(gettype($element) . "Collection element must be of the type int, " . " given.");
             }
         }
     }
 }


2) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Collection\RatingsCountCollection.php:75    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach ($elements as $element) {
             if (!is_int($element)) {
-                throw new InvalidTypeException("Collection element must be of the type int, " . gettype($element) . " given.");
+                throw new InvalidTypeException(gettype($element) . " given.");
             }
         }
     }
 }


3) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Collection\RatingsCountCollection.php:75    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach ($elements as $element) {
             if (!is_int($element)) {
-                throw new InvalidTypeException("Collection element must be of the type int, " . gettype($element) . " given.");
+                throw new InvalidTypeException("Collection element must be of the type int, " . " given.");
             }
         }
     }
 }


4) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Collection\RatingsCountCollection.php:75    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach ($elements as $element) {
             if (!is_int($element)) {
-                throw new InvalidTypeException("Collection element must be of the type int, " . gettype($element) . " given.");
+                throw new InvalidTypeException("Collection element must be of the type int, " . " given." . gettype($element));
             }
         }
     }
 }


5) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Collection\RatingsCountCollection.php:75    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach ($elements as $element) {
             if (!is_int($element)) {
-                throw new InvalidTypeException("Collection element must be of the type int, " . gettype($element) . " given.");
+                throw new InvalidTypeException("Collection element must be of the type int, " . gettype($element));
             }
         }
     }
 }


6) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Config\RatingWeightConfig.php:18    [M] DecrementInteger

--- Original
+++ New
@@ @@
      * @param int $assumeNegativeRatingIsLessThan
      * @param float $confidence
      */
-    public function __construct(?string $formula = null, int $assumeNegativeRatingIsLessThan = 3, float $confidence = 0.95)
+    public function __construct(?string $formula = null, int $assumeNegativeRatingIsLessThan = 2, float $confidence = 0.95)
     {
         $this->formula = $formula;
         $this->assumeNegativeRatingIsLessThan = $assumeNegativeRatingIsLessThan;


7) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Config\RatingWeightConfig.php:18    [M] IncrementInteger

--- Original
+++ New
@@ @@
      * @param int $assumeNegativeRatingIsLessThan
      * @param float $confidence
      */
-    public function __construct(?string $formula = null, int $assumeNegativeRatingIsLessThan = 3, float $confidence = 0.95)
+    public function __construct(?string $formula = null, int $assumeNegativeRatingIsLessThan = 4, float $confidence = 0.95)
     {
         $this->formula = $formula;
         $this->assumeNegativeRatingIsLessThan = $assumeNegativeRatingIsLessThan;


8) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:24    [M] OneZeroFloat

--- Original
+++ New
@@ @@
         $ratingsCount = $this->ratings->sum();
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
-        $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
+        $positiveRatingRatio = 0.0 * $positiveRatingsCount / $ratingsCount;
         return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
     }
     private function calculateZ(float $confidence) : float


9) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:24    [M] Division

--- Original
+++ New
@@ @@
         $ratingsCount = $this->ratings->sum();
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
-        $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
+        $positiveRatingRatio = 1.0 * $positiveRatingsCount * $ratingsCount;
         return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
     }
     private function calculateZ(float $confidence) : float


10) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:26    [M] Division

--- Original
+++ New
@@ @@
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
         $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
-        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
+        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) * (1 + $z * $z / $ratingsCount);
     }
     private function calculateZ(float $confidence) : float
     {


11) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:27    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
         $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
-        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
+        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (0 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
     }
     private function calculateZ(float $confidence) : float
     {


12) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:27    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
         $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
-        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
+        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (2 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
     }
     private function calculateZ(float $confidence) : float
     {


13) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:27    [M] Minus

--- Original
+++ New
@@ @@
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
         $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
-        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
+        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 + $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
     }
     private function calculateZ(float $confidence) : float
     {


14) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:27    [M] Multiplication

--- Original
+++ New
@@ @@
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
         $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
-        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
+        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio / (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
     }
     private function calculateZ(float $confidence) : float
     {


15) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:28    [M] Plus

--- Original
+++ New
@@ @@
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
         $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
-        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
+        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 - $z * $z / $ratingsCount);
     }
     private function calculateZ(float $confidence) : float
     {


16) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:28    [M] Multiplication

--- Original
+++ New
@@ @@
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
         $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
-        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
+        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z / $z / $ratingsCount);
     }
     private function calculateZ(float $confidence) : float
     {


17) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:28    [M] Division

--- Original
+++ New
@@ @@
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
         $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
-        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
+        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z * $ratingsCount);
     }
     private function calculateZ(float $confidence) : float
     {


18) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:28    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
         $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
-        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
+        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (2 + $z * $z / $ratingsCount);
     }
     private function calculateZ(float $confidence) : float
     {


19) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:28    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $positiveRatingsCount = $this->countPositiveRatings($this->ratings, $this->ratingWeightConfig->getAssumeNegativeRatingIsLessThan());
         $z = $this->calculateZ($this->ratingWeightConfig->getConfidence());
         $positiveRatingRatio = 1.0 * $positiveRatingsCount / $ratingsCount;
-        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (1 + $z * $z / $ratingsCount);
+        return ($positiveRatingRatio + $z * $z / (2 * $ratingsCount) - $z * sqrt(($positiveRatingRatio * (1 - $positiveRatingRatio) + $z * $z / (4 * $ratingsCount)) / $ratingsCount)) / (0 + $z * $z / $ratingsCount);
     }
     private function calculateZ(float $confidence) : float
     {


20) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:33    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     private function calculateZ(float $confidence) : float
     {
-        return MathHelper::percentPointFunction(1 - (1 - $confidence) / 2);
+        return MathHelper::percentPointFunction(1 - (1 - $confidence) / 1);
     }
     // TODO: Create countFromIndex() method in Collection
     private function countPositiveRatings(CollectionInterface $collection, int $assumeNegativeRatingIsLessThan) : int


21) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:33    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     private function calculateZ(float $confidence) : float
     {
-        return MathHelper::percentPointFunction(1 - (1 - $confidence) / 2);
+        return MathHelper::percentPointFunction(1 - (1 - $confidence) / 3);
     }
     // TODO: Create countFromIndex() method in Collection
     private function countPositiveRatings(CollectionInterface $collection, int $assumeNegativeRatingIsLessThan) : int


22) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:33    [M] Division

--- Original
+++ New
@@ @@
     }
     private function calculateZ(float $confidence) : float
     {
-        return MathHelper::percentPointFunction(1 - (1 - $confidence) / 2);
+        return MathHelper::percentPointFunction(1 - (1 - $confidence) * 2);
     }
     // TODO: Create countFromIndex() method in Collection
     private function countPositiveRatings(CollectionInterface $collection, int $assumeNegativeRatingIsLessThan) : int


23) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:43    [M] LessThan

--- Original
+++ New
@@ @@
     private function countPositiveRatings(CollectionInterface $collection, int $assumeNegativeRatingIsLessThan) : int
     {
         $totalCount = 0;
-        for ($i = $assumeNegativeRatingIsLessThan; $i < $collection->count(); $i++) {
+        for ($i = $assumeNegativeRatingIsLessThan; $i <= $collection->count(); $i++) {
             $totalCount += $collection->all()[$i];
         }
         return $totalCount;
     }
 }


24) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:43    [M] Increment

--- Original
+++ New
@@ @@
     private function countPositiveRatings(CollectionInterface $collection, int $assumeNegativeRatingIsLessThan) : int
     {
         $totalCount = 0;
-        for ($i = $assumeNegativeRatingIsLessThan; $i < $collection->count(); $i++) {
+        for ($i = $assumeNegativeRatingIsLessThan; $i < $collection->count(); $i--) {
             $totalCount += $collection->all()[$i];
         }
         return $totalCount;
     }
 }


25) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:43    [M] For_

--- Original
+++ New
@@ @@
     private function countPositiveRatings(CollectionInterface $collection, int $assumeNegativeRatingIsLessThan) : int
     {
         $totalCount = 0;
-        for ($i = $assumeNegativeRatingIsLessThan; $i < $collection->count(); $i++) {
+        for ($i = $assumeNegativeRatingIsLessThan; false; $i++) {
             $totalCount += $collection->all()[$i];
         }
         return $totalCount;
     }
 }


26) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Helper\MathHelper.php:13    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return sqrt(2) * self::inverseErrorFunction(2 * $x - 1);
     }
-    public static function inverseErrorFunction(float $x) : float
+    protected static function inverseErrorFunction(float $x) : float
     {
         $a = 8 * (M_PI - 3) / (3 * M_PI * (4 - M_PI));
         // 0.147


27) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Helper\MathHelper.php:18    [M] LessThan

--- Original
+++ New
@@ @@
         $a = 8 * (M_PI - 3) / (3 * M_PI * (4 - M_PI));
         // 0.147
         $b = 2 / (M_PI * $a) + log(1 - $x ** 2) / 2;
-        $signOfX = $x < 0 ? -1.0 : 1.0;
+        $signOfX = $x <= 0 ? -1.0 : 1.0;
         $result = sqrt($b ** 2 - log(1 - $x ** 2) / $a);
         $result = sqrt($result - $b);
         return $result * $signOfX;
     }
 }


28) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Helper\MathHelper.php:18    [M] OneZeroFloat

--- Original
+++ New
@@ @@
         $a = 8 * (M_PI - 3) / (3 * M_PI * (4 - M_PI));
         // 0.147
         $b = 2 / (M_PI * $a) + log(1 - $x ** 2) / 2;
-        $signOfX = $x < 0 ? -1.0 : 1.0;
+        $signOfX = $x < 0 ? -0.0 : 1.0;
         $result = sqrt($b ** 2 - log(1 - $x ** 2) / $a);
         $result = sqrt($result - $b);
         return $result * $signOfX;
     }
 }


29) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Helper\MathHelper.php:23    [M] Multiplication

--- Original
+++ New
@@ @@
         $signOfX = $x < 0 ? -1.0 : 1.0;
         $result = sqrt($b ** 2 - log(1 - $x ** 2) / $a);
         $result = sqrt($result - $b);
-        return $result * $signOfX;
+        return $result / $signOfX;
     }
 }


30) C:\Users\Miljan\Desktop\Weighted-Ratings\src\RatingWeightCalculator.php:62    [M] Throw_

--- Original
+++ New
@@ @@
     private function loadFormula(CollectionInterface $collection) : AbstractFormula
     {
         if ($this->ratingWeightConfig->getFormula() === null) {
-            throw new InvalidConfigurationException("Formula is not configured.");
+            new InvalidConfigurationException("Formula is not configured.");
         }
         if ($this->ratingWeightConfig->getFormula() === self::FORMULA_WILSON_LOWER_BOUND) {
             return new WilsonLowerBound($collection, $this->ratingWeightConfig);


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:44    [M] Assignment

--- Original
+++ New
@@ @@
     {
         $totalCount = 0;
         for ($i = $assumeNegativeRatingIsLessThan; $i < $collection->count(); $i++) {
-            $totalCount += $collection->all()[$i];
+            $totalCount = $collection->all()[$i];
         }
         return $totalCount;
     }
 }


2) C:\Users\Miljan\Desktop\Weighted-Ratings\src\Formula\WilsonLowerBound.php:44    [M] PlusEqual

--- Original
+++ New
@@ @@
     {
         $totalCount = 0;
         for ($i = $assumeNegativeRatingIsLessThan; $i < $collection->count(); $i++) {
-            $totalCount += $collection->all()[$i];
+            $totalCount -= $collection->all()[$i];
         }
         return $totalCount;
     }
 }
